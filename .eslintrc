{
    "env": {
        "browser": false,
        "node":    true,
        "amd":     false,
        "mocha":   false
    },

    "rules": {

        /* Possible Errors ****************************************************/

        "no-cond-assign":             2, // disallow assignment in conditional expressions
        "no-console":                 0, // disallow use of console
        "no-constant-condition":      2, // disallow use of constant expressions in conditions
        "no-comma-dangle":            2, // disallow trailing commas in object literals
        "no-control-regex":           2, // disallow control characters in regular expressions
        "no-debugger":                2, // disallow use of debugger
        "no-dupe-keys":               2, // disallow duplicate keys when creating object literals
        "no-empty":                   2, // disallow empty statements
        "no-empty-class":             2, // disallow the use of empty character classes in regular expressions
        "no-ex-assign":               2, // disallow assigning to the exception in a catch block
        "no-extra-boolean-cast":      2, // disallow double-negation boolean casts in a boolean context
        "no-extra-parens":            0, // disallow unnecessary parentheses
        "no-extra-semi":              2, // disallow unnecessary semicolons
        "no-func-assign":             2, // disallow overwriting functions written as function declarations
        "no-inner-declarations":    [ 2, "functions" ],
                                         // disallow function or variable declarations in nested blocks
        "no-invalid-regexp":          2, // disallow invalid regular expression strings in the RegExp constructor
        "no-negated-in-lhs":          2, // disallow negation of the left operand of an in expression
        "no-obj-calls":               2, // disallow the use of object properties of the global object (Math and JSON) as functions
        "no-regex-spaces":            2, // disallow multiple spaces in a regular expression literal
        "no-sparse-arrays":           2, // disallow sparse arrays
        "no-unreachable":             2, // disallow unreachable statements after a return, throw, continue, or break statement
        "use-isnan":                  2, // disallow comparisons with the value NaN
        "valid-jsdoc":                0, // Ensure JSDoc comments are valid
        "valid-typeof":               2, // Ensure that the results of typeof are compared against a valid string

        /* Best Practices *****************************************************/

        "block-scoped-var":           2, // treat var statements as if they were block scoped
        "complexity":               [ 0, 11 ],
                                         // specify the maximum cyclomatic complexity allowed in a program
        "consistent-return":          2, // require return statements to either always or never specify values
        "curly":                    [ 2, "all" ],
                                         // specify curly brace conventions for all control statements
        "default-case":               2, // require default case in switch statements
        "dot-notation":               2, // encourages use of dot notation whenever possible
        "eqeqeq":                     2, // require the use of === and !==
        "guard-for-in":               0, // make sure for-in loops have an if statement
        "no-alert":                   2, // disallow the use of alert, confirm, and prompt
        "no-caller":                  2, // disallow use of arguments.caller or arguments.callee
        "no-div-regex":               2, // disallow division operators explicitly at beginning of regular expression
        "no-else-return":             2, // disallow else after a return in an if
        "no-empty-label":             2, // disallow use of labels for anything other then loops and switches
        "no-eq-null":                 2, // disallow comparisons to null without a type-checking operator
        "no-eval":                    2, // disallow use of eval()
        "no-extend-native":           2, // disallow adding to native types
        "no-fallthrough":             2, // disallow fallthrough of case statements
        "no-floating-decimal":        2, // disallow the use of leading or trailing decimal points in numeric literals
        "no-implied-eval":            2, // disallow use of eval()-like methods
        "no-labels":                  2, // disallow use of labeled statements
        "no-iterator":                2, // disallow usage of __iterator__ property
        "no-lone-blocks":             2, // disallow unnecessary nested blocks
        "no-loop-func":               2, // disallow creation of functions within loops
        "no-multi-str":               2, // disallow use of multiline strings
        "no-native-reassign":         2, // disallow reassignments of native objects
        "no-new":                     2, // disallow use of new operator when not part of the assignment or comparison
        "no-new-func":                2, // disallow use of new operator for Function object
        "no-new-wrappers":            2, // disallows creating new instances of String, Number, and Boolean
        "no-octal":                   2, // disallow use of octal literals
        "no-octal-escape":            2, // disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
        "no-proto":                   2, // disallow usage of __proto__ property
        "no-redeclare":               2, // disallow declaring the same variable more then once
        "no-return-assign":           2, // disallow use of assignment in return statement
        "no-script-url":              2, // disallow use of javascript: urls.
        "no-self-compare":            2, // disallow comparisons where both sides are exactly the same
        "no-sequences":               2, // disallow use of comma operator
        "no-unused-expressions":      2, // disallow usage of expressions in statement position
        "no-warning-comments":      [ 1, { "terms": [ "todo", "fixme", "xxx" ], "location": "start" } ],
                                         // disallow usage of configurable warning terms in comments - e.g. TODO or FIXME
        "no-with":                    2, // disallow use of the with statement
        "radix":                      2, // require use of the second argument for parseInt()
        "wrap-iife":                  2, // require immediate function invocation to be wrapped in parentheses
        "yoda":                     [ 2, "never" ],
                                         // require or disallow Yoda conditions

        /* Strict Mode ********************************************************/

        "no-global-strict":           0, // disallow the "use strict" pragma in the global scope
        "no-extra-strict":            2, // disallow unnecessary use of "use strict"; when already in strict mode
        "strict":                     2, // require that all functions are run in strict mode

        /* Variables **********************************************************/

        "no-catch-shadow":            0, // disallow the catch clause parameter name being the same as a variable in the outer scope
        "no-delete-var":              2, // disallow deletion of variables
        "no-label-var":               2, // disallow labels that share a name with a variable
        "no-shadow":                  2, // disallow declaration of variables already declared in the outer scope
        "no-shadow-restricted-names": 2, // disallow shadowing of names such as arguments
        "no-undef":                   2, // disallow use of undeclared variables unless mentioned in a /*global */ block
        "no-undefined":               2, // disallow use of undefined variable
        "no-undef-init":              2, // disallow use of undefined when initializing variables
        "no-unused-vars":           [ 2, { "vars": "all", "args": "after-used" } ],
                                         // disallow declaration of variables that are not used in the code
        "no-use-before-define":       2, // disallow use of variables before they are defined

        /* Node.js ************************************************************/

        "handle-callback-err":        2, // enforces error handling in callbacks
        "no-mixed-requires":        [ 0, true ],
                                         // disallow mixing regular variable and require declarations
        "no-new-require":             2, // disallow use of new operator with the require function
        "no-path-concat":             2, // disallow string concatenation with __dirname and __filename
        "no-process-exit":            2, // disallow process.exit()
        "no-restricted-modules":      0, // restrict usage of specified node modules
        "no-sync":                    0, // disallow use of synchronous methods

        /* Stylistic Issues ***************************************************/

        "brace-style":              [ 2, "1tbs" ],
                                         // enforce one true brace style
        "camelcase":                  2, // require camel case names
        "consistent-this":          [ 2, "self" ],
                                         // enforces consistent naming when capturing the current execution context
        "eol-last":                   2, // enforce newline at the end of file, with no multiple empty lines
        "func-names":                 0, // require function expressions to have a name
        "func-style":               [ 2, "expression" ],
                                         // enforces use of function declarations or expressions
        "new-cap":                    2, // require a capital letter for constructors
        "new-parens":                 2, // disallow the omission of parentheses when invoking a contructor with no arguments
        "no-nested-ternary":          2, // disallow nested ternary expressions
        "no-array-constructor":       2, // disallow use of the Array constructor
        "no-lonely-if":               2, // disallow if as the only statement in an else block
        "no-new-object":              2, // disallow use of the Object constructor
        "no-spaced-func":             2, // disallow space between function identifier and application
        "no-space-before-semi":       2, // disallow space before semicolon
        "no-ternary":                 0, // disallow the use of ternary operators
        "no-trailing-spaces":         2, // disallow trailing whitespace at the end of lines
        "no-underscore-dangle":       2, // disallow dangling underscores in identifiers
        "no-wrap-func":               2, // disallow wrapping of non-IIFE statements in parens
        "no-mixed-spaces-and-tabs": [ 2, false ],
                                         // disallow mixed spaces and tabs for indentation
        "quotes":                   [ 2, "single" ],
                                         // specify whether double or single quotes should be used
        "quote-props":                0, // require quotes around object literal property names
        "semi":                     [ 2, "always" ],
                                         // require or disallow use of semicolons instead of ASI
        "sort-vars":                  2, // sort variables within the same declaration block
        "space-after-keywords":     [ 2, "always" ],
                                         // require a space after certain keywords
        "space-in-brackets":        [ 2, "always" ],
                                         // require or disallow spaces between brackets
     // "space-in-parens":          [ 2, "always" ],
                                         // disallow or enforce spaces inside of parentheses
        "space-infix-ops":            2, // require spaces around operators
        "space-return-throw-case":    2, // require a space after return, throw, and case
        "space-unary-word-ops":       2, // require a space around word operators such as typeof
        "max-nested-callbacks":     [ 0, 2 ],
                                         // specify the maximum depth callbacks can be nested
        "one-var":                    0, // allow just one var statement per function
        "wrap-regex":                 2, // require regex literals to be wrapped in parentheses

        /* Legacy *************************************************************/

        "max-depth":                [ 0, 4 ],
                                         // specify the maximum depth that blocks can be nested
        "max-len":                  [ 0, 80, 4 ],
                                         // specify the maximum length of a line in your program
        "max-params":               [ 0, 3 ],
                                         // limits the number of parameters that can be used in the function declaration.
        "max-statements":           [ 0, 10 ],
                                         // specify the maximum number of statement allowed in a function
        "no-bitwise":                 0, // disallow use of bitwise operators
        "no-plusplus":                0  // disallow use of unary operators, ++ and --
    }
}
